const { Api } = require('telegram');

async function parseMessages(client, chat) {
  try {
    let allUsers = new Map(); 
    let offsetId = 0;
    let limit = 50;
    let totalMessages = 0;
    const maxMessages = 1000; 

    console.log("üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...");

    let messages;
    do {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      messages = await client.getMessages(chat.id, { offsetId, limit });

      if (messages.length > 0) {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        offsetId = messages[messages.length - 1].id;
        totalMessages += messages.length;

        // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–∂–µ 25 000 —Å–æ–æ–±—â–µ–Ω–∏–π, –≤—ã—Ö–æ–¥–∏–º
        if (totalMessages >= maxMessages) {
          console.log(`üîç –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (${maxMessages}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.`);
          break;
        }
      }

      for (let message of messages) {
        if (message.fromId?.userId) {
          allUsers.set(message.fromId.userId, message.fromId.userId);
        }
      }

    } while (messages.length === limit);

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º Map –≤ –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [];
    for (let userId of allUsers.keys()) {
      try {
        const user = await client.getEntity(userId);
        users.push({
          id: user.id.toString(),
          username: user.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          name: `${user.firstName || ""} ${user.lastName || ""}`.trim() || "–ë–µ–∑ –∏–º–µ–Ω–∏",
        });
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ
        if (err.message.includes('A wait of')) {
          const waitTime = parseInt(err.message.split(' ')[3], 10) * 1000; // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
          console.log(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å ${waitTime / 1000} —Å–µ–∫—É–Ω–¥...`);
          await new Promise(res => setTimeout(res, waitTime)); // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
          continue; // –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        }
      }
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: ${users.length}`);
    return users;

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", err.message);
    return [];
  }
}

module.exports = parseMessages;
