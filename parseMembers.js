const parseMessages = require('./parseMessages');
const { Api } = require('telegram');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function getChatParticipantCount(client, chat) {
  const fullChat = await client.invoke(
    new Api.channels.GetFullChannel({
      channel: chat,
    })
  );
  
  return fullChat.fullChat.participantsCount;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function parseMembers(client, chat) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    const totalCount = await getChatParticipantCount(client, chat);
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ: ${totalCount}`);

    let participants = [];
    try {
      participants = await client.getParticipants(chat.id);
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ getParticipants: ${participants.length}`);
      
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ getParticipants –º–µ–Ω—å—à–µ 20% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (participants.length < totalCount * 0.2) {
        console.warn("‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...");
        return await parseMessages(client, chat);
      }
      
      if (participants.length === 0) {
        throw new Error("–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫—Ä—ã—Ç—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–∞—Ä—Å–∏–Ω–≥—É —Å–æ–æ–±—â–µ–Ω–∏–π...");
      return await parseMessages(client, chat);
    }

    const users = participants
      .filter(user => !user.bot && !user.admin)
      .map(user => ({
        id: user.id.toString(),
        username: user.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        name: `${user.firstName || ""} ${user.lastName || ""}`.trim() || "–ë–µ–∑ –∏–º–µ–Ω–∏",
      }));

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    return users;

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ parseMembers:", err.message);
    return [];
  }
}

module.exports = parseMembers;
