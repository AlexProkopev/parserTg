const { Api } = require('telegram');

async function parseMembers(client, chat) {
  try {
    let participants = [];

    try {

      participants = await client.getParticipants(chat.id);
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ getParticipants: ${participants.length}`);
      
      const expectedParticipantsCount = 100; 
      if (participants.length < expectedParticipantsCount * 0.8) { 
        console.log("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π.");
        throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π");
      }

    } catch (err) {

      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", err.message);
      console.log("‚ùå –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.");
      

      participants = await parseMessages(client, chat);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = Array.from(new Set(participants.map(user => user.id.toString())))
      .map(id => participants.find(user => user.id.toString() === id))
      .map((user) => ({
        id: user.id.toString(),
        username: user.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        name: `${user.firstName || ""} ${user.lastName || ""}`.trim() || "–ë–µ–∑ –∏–º–µ–Ω–∏",
      }));

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    return users;

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", err.message);
    return [];
  }
}

async function parseMessages(client, chat) {
  try {
    let allUsers = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let offsetId = 0; 
    let limit = 50; 

    console.log("üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...");

    let messages;
    do {
      messages = await client.getMessages(chat.id, { offsetId, limit });
      if (messages.length > 0) {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      }

      for (let message of messages) {
        if (message.fromId) {
          allUsers.add(message.fromId); // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
      }

      if (messages.length > 0) {
        offsetId = messages[messages.length - 1].id;
      }

    } while (messages.length === limit); 

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
    const users = [];
    for (let userId of allUsers) {
      try {
        const user = await client.getEntity(userId);
        users.push({
          id: user.id.toString(),
          username: user.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          name: `${user.firstName || ""} ${user.lastName || ""}`.trim() || "–ë–µ–∑ –∏–º–µ–Ω–∏",
        });
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      }
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π: ${users.length}`);
    return users;

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
    return [];
  }
}

module.exports = parseMembers;
