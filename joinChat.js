const { Api } = require('telegram');

async function joinChat(client, link) {
  try {
    if (link.includes("+")) {
      const inviteCode = link.split("/+")[1];

      try {
        const chat = await client.getEntity(link);
        
        if (chat) {
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ getParticipants
          await parseParticipants(client, chat);
        }
      } catch (error) {
        console.log("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –º—ã –Ω–µ –≤ —á–∞—Ç–µ.");
      }

      const result = await client.invoke(new Api.messages.ImportChatInvite({
        hash: inviteCode
      }));

      console.log("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ.");

      if (result.chats && result.chats.length > 0) {
        const chat = result.chats[0]; // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ.");

        // –ü–∞—Ä—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await parseParticipants(client, chat);
      } else {
        console.error("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.");
      }
    } else {
      console.log("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞.");
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏:", err);
  }
}

async function parseParticipants(client, chat) {
  try {
    let participants = [];
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
      participants = await client.getParticipants(chat.id);

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ getParticipants: ${participants.length}`);
      
      if (participants.length === 0) {
        console.log("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫—Ä—ã—Ç—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–∞—Ä—Å–∏–Ω–≥—É —Å–æ–æ–±—â–µ–Ω–∏–π.");
        // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫—Ä—ã—Ç—ã, –ø–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await parseMessages(client, chat);
        return;
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", err);
      console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.");
      // –ï—Å–ª–∏ getParticipants –Ω–µ —É–¥–∞–µ—Ç—Å—è, –ø–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
      await parseMessages(client, chat);
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –±–æ—Ç–æ–≤)
    const users = participants.filter((user) => !user.bot && !user.admin).map((user) => ({
      id: user.id.toString(),
      username: user.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      name: `${user.firstName || ""} ${user.lastName || ""}`.trim() || "–ë–µ–∑ –∏–º–µ–Ω–∏",
    }));

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –Ω–µ –±–æ—Ç–æ–≤): ${users.length}`);
    users.forEach((user) => {
      console.log(`ID: ${user.id}, Username: ${user.username}, Name: ${user.name}`);
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", err);
  }
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function parseMessages(client, chat) {
  try {
    let allUsers = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let offsetId = 0; // –ù–∞—á–∞–ª—å–Ω—ã–π offset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    let limit = 100; // –ü–æ–ª—É—á–∞–µ–º –ø–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–∞—á–∫–∞–º
    let messages;
    do {
      messages = await client.getMessages(chat.id, { offsetId, limit });
      for (let message of messages) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (message.fromId) {
          allUsers.add(message.fromId); // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      offsetId = messages[messages.length - 1].id;

    } while (messages.length === limit); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –º–µ–Ω—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —á–µ–º –ª–∏–º–∏—Ç

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
    const users = [];
    for (let userId of allUsers) {
      try {
        const user = await client.getEntity(userId);
        users.push({
          id: user.id.toString(),
          username: user.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          name: `${user.firstName || ""} ${user.lastName || ""}`.trim() || "–ë–µ–∑ –∏–º–µ–Ω–∏",
        });
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      }
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    users.forEach((user) => {
      console.log(`ID: ${user.id}, Username: ${user.username}, Name: ${user.name}`);
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
  }
}

module.exports = joinChat;
